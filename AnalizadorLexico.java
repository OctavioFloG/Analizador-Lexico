<<<<<<< Updated upstream
public class AnalizadorLexico {
    // Definimos los estados del autómata
    private static final int INICIO = 0;
    private static final int ESTADO_A = 1;
    private static final int ESTADO_B = 2;
    private static final int ACEPTACION = 3;

    // Filas = estados, Columnas = elementos
    private int[][] matrizTransicion = {
        {},     // Estado INICIO
        {},     // Estado ESTADO_A
        {},   // Estado ESTADO_B
        {}  // Estado ACEPTACION (estado de aceptación)
    };

    // Estado actual del autómata
    private int estadoActual;
=======
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class AnalizadorLexico {
    private static final String INICIO = "q0";

    // Filas = estados, Columnas = elementos
    // cantidad de columnas 61 (caracteres)
    // cantidad de filas x (estados)
    private String[][] matrizTransicion = {
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q0
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1010.1
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // 1010.2
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1010.3
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1010.4
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1010.5
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1010.6
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1010.7
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1020.1
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1020.2
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1020.3
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1020.4
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q1020.5
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q2010.1 +
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q2020.1 -
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q2030.1 *
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q2040.1 /
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q2050.1 %
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q4010.1 {
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q4020.1 }
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q5010.1 (
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q5020.1 )
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q6000.1 Identificadores
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q7000.1 Constantes
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, // q7000.2
            {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""} // q8000.1 Flotantes
    };

    private String estadoActual;
>>>>>>> Stashed changes

    // Constructor
    public AnalizadorLexico() {
        estadoActual = INICIO;
    }

    // Método para procesar una cadena de carácteres
    public boolean procesarCadena(String cadena) {
<<<<<<< Updated upstream
        estadoActual = INICIO; // Reiniciar el autómata
=======
        estadoActual = INICIO; // Regresar a q0
>>>>>>> Stashed changes

        for (char simbolo : cadena.toCharArray()) {
            char lower_simbolo = Character.toLowerCase(simbolo);
            int columna = obtenerColumna(lower_simbolo);
            if (columna == -1) {
                // Símbolo no válido, la cadena es rechazada
                return false;
            }
            estadoActual = matrizTransicion[0][columna];
            // estadoActual = matrizTransicion[estadoActual][columna];

            if (estadoActual  == null) {
                // No se encontró ningun estado siguiente
                return false;
            }
        }
<<<<<<< Updated upstream
        // La cadena es aceptada si el estado final es el de aceptación
        return estadoActual == ACEPTACION;
    }

    // Método para obtener la columna en la matriz según el símbolo de entrada
    private int obtenerColumna(char simbolo) {
        switch (simbolo) {
            case 'a': return 0;
            case 'b': return 1;
            default: return -1; // Símbolo no reconocido
        }
=======
        return false;
>>>>>>> Stashed changes
    }

    public static void main(String[] args) {
        Automata automata = new Automata();

        String cadena = "ab"; // Ejemplo de cadena de entrada
        if (automata.procesarCadena(cadena)) {
            System.out.println("La cadena '" + cadena + "' es aceptada.");
        } else {
            System.out.println("La cadena '" + cadena + "' es rechazada.");
        }
    }
<<<<<<< Updated upstream
}
=======

    public static void main(String[] args) {
        // AnalizadorLexico automata = new AnalizadorLexico();
        // String nombreArchivo = "codigo.txt";
        // automata.procesarArchivo(nombreArchivo);
        System.out.println(obtenerFila("q0"));
        System.out.println(obtenerColumna('"'));
    }

    private static int obtenerColumna(char simbolo) {
        char[] caracter = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
                't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/',
                '%', '{', '}', '(', ')', '[', ']', '.', ' ', '_', '$', '^', '<', '>', '&', '|', '!', ';', ',', '\'', '"' };
        for (int i = 0; i < caracter.length; i++) {
            if (caracter[i] == simbolo) {
                return i;
            }
        }
        return -1;
    }
    private static int obtenerFila(String estado){
        String[] estado_array = {};
        for (int i = 0; i < estado_array.length; i++) {
            if (estado_array[i] == estado) {
                return i;
            }
        }
        return 0;
    }
}
>>>>>>> Stashed changes
